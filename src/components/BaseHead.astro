---
export interface Props {
  title: string;
  description: string;
  permalink: string;
}
const { title, description, permalink } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />


<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content="/social.jpg?v=1" />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={permalink} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content="/social.jpg?v=1" />

<!-- Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Gentium+Basic:ital,wght@0,400;0,700;1,400;1,700&amp;family=Kaisei+HarunoUmi:wght@500;700&amp;display=swap" rel="stylesheet">

<script type="module">

function accordionDetails(details, transitionMs = 250) {
	const accordion = details.querySelector('.accordion');
	const summary = details.querySelector('summary');
	const div = accordion && accordion.querySelector('div');
	if (!accordion || !summary || !div) return;

	let timeout

	function setOpen(open) {
		accordion.setAttribute('data-open', open);
		summary.setAttribute('data-open', open);
	}

	/**
	 * When we are about to close we need to delay the actual close.
	 * If we didn't do that the contents would close immediately.
	 */
	function beforeToggle(event) {
		if (event.defaultPrevented) return;
		// Just to allow animated accordion to follow fast toggles
		if (timeout) {
			event.preventDefault();
			setOpen(true);
			clearTimeout(timeout);
			timeout = undefined;
		} else if (details.open) {
			event.preventDefault();
			setOpen(false);
			timeout = setTimeout(() => {
				details.open = false;
				timeout = undefined;
			}, transitionMs);
		}
	}

	function afterToggle() {
		setOpen(details.open);
	}

	/**
	 * To cover all basic usability track clicks, Enter, and Space.
	 */
	summary.addEventListener('click', beforeToggle);
	summary.addEventListener('keydown', (event) => {
		if (event.key === 'Enter' || event.key === 'Space') {
			beforeToggle(event);
		}
	});
	details.addEventListener('toggle', afterToggle);

	// Provide customized transition time to CSS.
	const transitionStyle = transitionMs > 0 ? `--ms:${transitionMs}ms;` : '';

	// Always know the actual height of the contents.
	const observer = new ResizeObserver(entries => {
		const entry = entries[0];
		const height = Math.ceil(entry.contentBoxSize
			? (entry.contentBoxSize[0] || entry.contentBoxSize).blockSize
			: entry.contentRect.height);
		details.style = `${transitionStyle}--height:${Math.ceil(height)}px;`;
	});

	// And we are ready to initialize.
	observer.observe(div);
	afterToggle();
}

const elements = document.body.querySelectorAll('details');
elements.forEach((details) => {
	accordionDetails(details);
});
</script>
