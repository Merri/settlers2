---
import Link from '$/components/Link.astro'
import MainHeader from '$/components/MainHeader.astro'
import './alku.css'
import './theme.css'

export interface Props {
	lang: 'en' | 'fi'
	description?: string
	permalink?: string
	seriesTitle?: string
	social?: string
	title: string
}

const { lang, seriesTitle, title, description = '', permalink = '', social = '/social.jpg?v=1' } = Astro.props

const LANG_TABLE = {
	en: {
		changeTheme: `Change theme`,
		goToLinksAtTop: `Go to links at top`,
		jumpToContent: `Jump to content`,
		linkToExternalSite: `Link to external site, opens a new window`,
		moveToContent: `Move to beginning of content`,
		theme: 'Theme',
		themeDark: 'Dark',
		themeDefault: 'Default',
		themeLight: 'Light',
	},
	fi: {
		changeTheme: `Vaihda teema`,
		goToLinksAtTop: `Näytä linkit sivun alussa`,
		jumpToContent: `Hyppää sisältöön`,
		linkToExternalSite: `Siirryt toiselle sivustolle uuteen ikkunaan`,
		moveToContent: `Siirry sisällön alkuun`,
		theme: 'Teema',
		themeDark: 'Tumma',
		themeDefault: 'Oletus',
		themeLight: 'Vaalea',
	},
} as const

const {
	changeTheme,
	goToLinksAtTop,
	jumpToContent,
	linkToExternalSite,
	moveToContent,
	theme,
	themeDark,
	themeDefault,
	themeLight,
} = LANG_TABLE[lang]
---

<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{seriesTitle ? `${title} | ${seriesTitle}` : title}</title>
		<meta name="title" content={title} />
		{description !== '' && <meta name="description" content={description} />}
		<slot name="head" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#193929" />
		<meta name="msapplication-TileColor" content="#193929" />
		<meta name="theme-color" content="#193929" />

		<link rel="canonical" href={permalink || new URL(Astro.url.pathname, Astro.site).toString()} />

		{permalink !== '' && (
			<meta property="og:type" content="website" />
			<meta property="og:url" content={permalink} />
			<meta property="og:title" content={title} />
			<meta property="og:description" content={description} />
			<meta property="og:image" content={social} />
			<meta property="twitter:card" content="summary_large_image" />
			<meta property="twitter:url" content={permalink} />
			<meta property="twitter:title" content={title} />
			<meta property="twitter:description" content={description} />
			<meta property="twitter:image" content={social} />
		)}

		<style>
			:global(a:not(:where(:hover, :focus, :active)))::after {
				opacity: var(--reduced-opacity);
			}

			:global(a)::after {
				transition: opacity 125ms ease-in-out;
			}

			:global(:where(code)) {
				background: var(--shadow-bg);
				box-shadow: 0 0 0 3px var(--shadow-bg);
			}

			:global(:where(pre > code)) {
				background: unset;
				box-shadow: unset;
			}

			:global(hr) {
				--dashed-border-angle: 90deg;
				border: 0 dashed var(--line-color, currentColor);
				border-block-width: 0.125rem 0;
				border-image: repeating-linear-gradient(
						var(--dashed-border-angle),
						var(--line-color, currentColor),
						var(--line-color, currentColor) 0.625rem,
						transparent 0.625rem,
						transparent 1rem
					)
					1 /1 /0 round;
				margin-block: 4rem;
			}

			.skip-link {
				background: var(--bg);
				box-shadow: 0 0 0 7px var(--shadow-bg);
				left: 50%;
				padding: 1rem;
				position: absolute;
				top: 2rem;
				transform: translateX(-50%);
				z-index: 10;
			}

			footer {
				display: grid;
				font-size: 1.375rem;
				line-height: 1.25;
				margin-top: 8rem;
				place-content: center;
				padding: 0 3rem 1.5rem;
				text-align: center;
			}

			footer a {
				color: inherit;
				display: inline-block;
				font: inherit;
			}

			footer small {
				display: inline-block;
				margin-top: 0.5rem;
			}

			#theme {
				margin-block: 1rem;
			}
		</style>
		<script type="module" is:inline>
			const opts = { once: true }
			function listenOnDevicePixelRatio() {
				const dpr = window.devicePixelRatio || 1
				document.body.style.setProperty('--inset', dpr !== 1 ? `calc((${dpr} - 1) * -50.001%)` : '')
				document.body.style.setProperty('--scale', dpr !== 1 ? `scale(calc(1 / ${dpr}))` : '')
				matchMedia(`(resolution: ${dpr}dppx)`).addEventListener('change', listenOnDevicePixelRatio, opts)
			}
			listenOnDevicePixelRatio()
		</script>
	</head>
	<body>
		<div id="link-to-external-site" hidden>{linkToExternalSite}</div>
		<a class="skip-link" data-hidden="visually" href="#main">{jumpToContent}</a>
		<MainHeader />
		<slot />
		<footer>
			<strong>Settlers II.net by <Link href="https://vesa.piittinen.name">Vesa Piittinen</Link> 2009 &ndash; {
				new Date().getFullYear()
			}</strong>
			<small>The Settlers II: Veni Vidi Vici, Mission CD, and Gold Edition by Blue Byte 1996</small>
			<p>
				<small><a href="/privacy">Privacy on Settlers2.net</a></small>
			</p>
			<div id="theme">
				<label>
					{theme}: <select id="set-theme">
						<option value="">{themeDefault}</option>
						<option value="light">{themeLight}</option>
						<option value="dark">{themeDark}</option>
					</select>
				</label>
			</div>
		</footer>
		<style>
		</style>
		<script type="module" is:inline>
			const hasLS = !(() => {
				try {
					localStorage.removeItem((localStorage._ = '_'))
				} catch (e) {
					return 1
				}
			})()
			const cssVar = 'CSS' in window && CSS.supports('--css:var')
			const theme = document.getElementById('theme')
			if (hasLS && cssVar && theme) {
				const setTheme = document.getElementById('set-theme')
				if (setTheme) {
					setTheme.value =
						(localStorage.theme === 'light' && 'light') || (localStorage.theme === 'dark' && 'dark') || ''
					setTheme.onchange = function (event) {
						if (event.target instanceof HTMLSelectElement && event.target.value) {
							document.documentElement.dataset.colorScheme = localStorage.theme = event.target.value
						} else {
							localStorage.removeItem('theme')
							delete document.documentElement.dataset.colorScheme
						}
					}
				}
				if (localStorage.theme != null) {
					document.documentElement.dataset.colorScheme = localStorage.theme === 'dark' ? 'dark' : 'light'
				}
			}

			// https://codepen.io/Merri/pen/qBMyrKX
			document.body.addEventListener('mousedown', summaryListener, false)
			document.body.addEventListener('touchstart', summaryListener, false)

			const contentSet = new WeakSet()
			const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion)')

			function summaryListener(event) {
				if (event.defaultPrevented) return
				const summary = event.target.closest('summary')
				const content =
					summary &&
					summary.parentElement.querySelector('details > summary + div:last-child > div:only-child')
				if (!content || contentSet.has(content)) return
				contentSet.add(content)
				smoothDetails(content)
			}

			function smoothDetails(content) {
				const container = content.parentElement
				const summary = container.previousElementSibling
				const details = summary.parentElement

				let timeout
				const transitionMs = ~~details.dataset.ms || 250

				function setOpen(open) {
					details.dataset.open = open
					if (!open) content.setAttribute('inert', '')
					else content.removeAttribute('inert')
				}

				function beforeToggle(event) {
					if (event.defaultPrevented || prefersReducedMotion.matches) return
					if (timeout) {
						event.preventDefault()
						setOpen(true)
						clearTimeout(timeout)
						timeout = undefined
					} else if (details.open) {
						event.preventDefault()
						setOpen(false)
						timeout = setTimeout(() => {
							details.open = false
							timeout = undefined
						}, transitionMs)
					}
				}

				function afterToggle(event) {
					if (event.defaultPrevented) return
					setOpen(details.open)
				}

				summary.addEventListener('click', beforeToggle)
				summary.addEventListener('keydown', (event) => {
					if (event.defaultPrevented) return
					if (event.key === 'Enter' || event.key === 'Space') {
						beforeToggle(event)
					}
				})
				details.addEventListener('toggle', afterToggle)

				const transitionStyle = transitionMs > 0 ? `--ms:${transitionMs}ms;` : ''

				const observer = new ResizeObserver((entries) => {
					const entry = entries[0]
					const height = Math.ceil(
						entry.contentBoxSize ? [].concat(entry.contentBoxSize)[0].blockSize : entry.contentRect.height
					)
					details.style = `${transitionStyle}--height:${height}px;`
				})

				observer.observe(content)
				setOpen(details.open)
			}
		</script>
	</body>
</html>
